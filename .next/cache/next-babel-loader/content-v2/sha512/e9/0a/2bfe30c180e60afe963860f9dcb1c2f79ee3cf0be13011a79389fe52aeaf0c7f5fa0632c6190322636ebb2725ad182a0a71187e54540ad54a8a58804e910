{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"L:\\\\PROGRAMOWANIE\\\\NEXT\\\\Udemy\\\\NEXT app\\\\big-project\\\\pages\\\\[cityId]\\\\index.js\";\nimport React from 'react';\nimport Head from 'next/head';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport CityDetail from '../../components/cities/CityDetail';\n\nconst CityDetails = props => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.cityData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.cityData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CityDetail, {\n      image: props.cityData.image,\n      title: props.cityData.title,\n      country: props.cityData.country,\n      description: props.cityData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb+srv://artur:leeloo83@cluster0.mm3bc.mongodb.net/cities?retryWrites=true&w=majority');\n  const db = client.db();\n  const citiesCollection = db.collection('cities');\n  const cities = await citiesCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: 'blocking',\n    paths: cities.map(city => ({\n      params: {\n        cityId: city._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  const cityId = context.params.cityId;\n  const client = await MongoClient.connect('mongodb+srv://artur:leeloo83@cluster0.mm3bc.mongodb.net/cities?retryWrites=true&w=majority');\n  const db = client.db();\n  const citiesCollection = db.collection('cities');\n  const selectedCity = await citiesCollection.findOne({\n    _id: ObjectId(cityId)\n  });\n  client.close();\n  return {\n    props: {\n      cityData: {\n        id: selectedCity._id.toString(),\n        title: selectedCity.title,\n        country: selectedCity.country,\n        image: selectedCity.image,\n        description: selectedCity.description\n      }\n    }\n  };\n};\nexport default CityDetails;","map":{"version":3,"sources":["L:/PROGRAMOWANIE/NEXT/Udemy/NEXT app/big-project/pages/[cityId]/index.js"],"names":["React","Head","MongoClient","ObjectId","CityDetail","CityDetails","props","cityData","title","description","image","country","getStaticPaths","client","connect","db","citiesCollection","collection","cities","find","_id","toArray","close","fallback","paths","map","city","params","cityId","toString","getStaticProps","context","selectedCity","findOne","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,UAAP,MAAuB,oCAAvB;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B,sBACI;AAAA,4BACA,QAAC,IAAD;AAAA,8BACG;AAAA,kBAAQA,KAAK,CAACC,QAAN,CAAeC;AAAvB;AAAA;AAAA;AAAA;AAAA,cADH,eAEG;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEF,KAAK,CAACC,QAAN,CAAeE;AAAjD;AAAA;AAAA;AAAA;AAAA,cAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAKA,QAAC,UAAD;AACI,MAAA,KAAK,EAAEH,KAAK,CAACC,QAAN,CAAeG,KAD1B;AAEI,MAAA,KAAK,EAAEJ,KAAK,CAACC,QAAN,CAAeC,KAF1B;AAGI,MAAA,OAAO,EAAEF,KAAK,CAACC,QAAN,CAAeI,OAH5B;AAII,MAAA,WAAW,EAAEL,KAAK,CAACC,QAAN,CAAeE;AAJhC;AAAA;AAAA;AAAA;AAAA,YALA;AAAA,kBADJ;AAcH,CAfD;;AAiBA,OAAO,MAAMG,cAAc,GAAG,YAAW;AAErC,QAAMC,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,4FAApB,CAArB;AACD,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,QAAd,CAAzB;AAEA,QAAMC,MAAM,GAAG,MAAMF,gBAAgB,CAACG,IAAjB,CAAsB,EAAtB,EAA0B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA1B,EAAoCC,OAApC,EAArB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEC,SAAO;AACHC,IAAAA,QAAQ,EAAE,UADP;AAEHC,IAAAA,KAAK,EAAEN,MAAM,CAACO,GAAP,CAAWC,IAAI,KAAK;AAACC,MAAAA,MAAM,EAAE;AAACC,QAAAA,MAAM,EAAEF,IAAI,CAACN,GAAL,CAASS,QAAT;AAAT;AAAT,KAAL,CAAf;AAFJ,GAAP;AAIH,CAfM;AAiBP,OAAO,MAAMC,cAAc,GAAG,MAAMC,OAAN,IAAkB;AAE5C,QAAMH,MAAM,GAAGG,OAAO,CAACJ,MAAR,CAAeC,MAA9B;AAEA,QAAMf,MAAM,GAAG,MAAMX,WAAW,CAACY,OAAZ,CAAoB,4FAApB,CAArB;AACD,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,gBAAgB,GAAGD,EAAE,CAACE,UAAH,CAAc,QAAd,CAAzB;AAEA,QAAMe,YAAY,GAAG,MAAMhB,gBAAgB,CAACiB,OAAjB,CAAyB;AAACb,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,MAAD;AAAd,GAAzB,CAA3B;AAEAf,EAAAA,MAAM,CAACS,KAAP;AAEC,SAAO;AACHhB,IAAAA,KAAK,EAAE;AACHC,MAAAA,QAAQ,EAAE;AACN2B,QAAAA,EAAE,EAAEF,YAAY,CAACZ,GAAb,CAAiBS,QAAjB,EADE;AAENrB,QAAAA,KAAK,EAAEwB,YAAY,CAACxB,KAFd;AAGNG,QAAAA,OAAO,EAAEqB,YAAY,CAACrB,OAHhB;AAIND,QAAAA,KAAK,EAAEsB,YAAY,CAACtB,KAJd;AAKND,QAAAA,WAAW,EAAEuB,YAAY,CAACvB;AALpB;AADP;AADJ,GAAP;AAWH,CAxBM;AA0BP,eAAeJ,WAAf","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport { MongoClient, ObjectId } from 'mongodb';\r\nimport CityDetail from '../../components/cities/CityDetail';\r\n\r\nconst CityDetails = (props) => {\r\n    return (\r\n        <>\r\n        <Head>\r\n           <title>{props.cityData.title}</title>\r\n           <meta name=\"description\" content={props.cityData.description} />\r\n       </Head>\r\n        <CityDetail\r\n            image={props.cityData.image}\r\n            title={props.cityData.title}\r\n            country={props.cityData.country}\r\n            description={props.cityData.description}\r\n        />\r\n        </>\r\n    )\r\n}\r\n\r\nexport const getStaticPaths = async() => {\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://artur:leeloo83@cluster0.mm3bc.mongodb.net/cities?retryWrites=true&w=majority');\r\n   const db = client.db();\r\n\r\n   const citiesCollection = db.collection('cities');\r\n\r\n   const cities = await citiesCollection.find({}, {_id: 1}).toArray();\r\n\r\n   client.close();\r\n\r\n    return {\r\n        fallback: 'blocking',\r\n        paths: cities.map(city => ({params: {cityId: city._id.toString()}})),\r\n    }\r\n}\r\n\r\nexport const getStaticProps = async(context) => {\r\n\r\n    const cityId = context.params.cityId;\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://artur:leeloo83@cluster0.mm3bc.mongodb.net/cities?retryWrites=true&w=majority');\r\n   const db = client.db();\r\n\r\n   const citiesCollection = db.collection('cities');\r\n\r\n   const selectedCity = await citiesCollection.findOne({_id: ObjectId(cityId)});\r\n\r\n   client.close();\r\n\r\n    return {\r\n        props: {\r\n            cityData: {\r\n                id: selectedCity._id.toString(),\r\n                title: selectedCity.title,\r\n                country: selectedCity.country,\r\n                image: selectedCity.image,\r\n                description: selectedCity.description\r\n            },\r\n        }\r\n    }\r\n}\r\n\r\nexport default CityDetails;"]},"metadata":{},"sourceType":"module"}