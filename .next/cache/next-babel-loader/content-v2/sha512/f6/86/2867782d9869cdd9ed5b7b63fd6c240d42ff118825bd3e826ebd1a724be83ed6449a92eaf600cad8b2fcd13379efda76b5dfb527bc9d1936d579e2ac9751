{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"L:\\\\PROGRAMOWANIE\\\\NEXT\\\\Udemy\\\\NEXT app\\\\big-project\\\\pages\\\\[cityId]\\\\index.js\",\n    _this = this;\n\nimport React from 'react';\nimport Head from 'next/head';\nimport CityDetail from '../../components/cities/CityDetail';\n\nvar CityDetails = function CityDetails(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Add a new Capital\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 12\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Add a new Capital to the database\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 12\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, _this), /*#__PURE__*/_jsxDEV(CityDetail, {\n      image: props.cityData.image,\n      title: props.cityData.title,\n      country: props.cityData.country,\n      description: props.cityData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, _this)]\n  }, void 0, true);\n};\n\n_c = CityDetails;\nexport var __N_SSG = true;\nexport default CityDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"CityDetails\");","map":{"version":3,"sources":["L:/PROGRAMOWANIE/NEXT/Udemy/NEXT app/big-project/pages/[cityId]/index.js"],"names":["React","Head","CityDetail","CityDetails","props","cityData","image","title","country","description"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,UAAP,MAAuB,oCAAvB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC3B,sBACI;AAAA,4BACA,QAAC,IAAD;AAAA,8BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADH,eAEG;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,eAFH;AAAA;AAAA;AAAA;AAAA;AAAA,aADA,eAKA,QAAC,UAAD;AACI,MAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeC,KAD1B;AAEI,MAAA,KAAK,EAAEF,KAAK,CAACC,QAAN,CAAeE,KAF1B;AAGI,MAAA,OAAO,EAAEH,KAAK,CAACC,QAAN,CAAeG,OAH5B;AAII,MAAA,WAAW,EAAEJ,KAAK,CAACC,QAAN,CAAeI;AAJhC;AAAA;AAAA;AAAA;AAAA,aALA;AAAA,kBADJ;AAcH,CAfD;;KAAMN,W;;AA4DN,eAAeA,WAAf","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport { MongoClient, ObjectId } from 'mongodb';\r\nimport CityDetail from '../../components/cities/CityDetail';\r\n\r\nconst CityDetails = (props) => {\r\n    return (\r\n        <>\r\n        <Head>\r\n           <title>Add a new Capital</title>\r\n           <meta name=\"description\" content=\"Add a new Capital to the database\" />\r\n       </Head>\r\n        <CityDetail\r\n            image={props.cityData.image}\r\n            title={props.cityData.title}\r\n            country={props.cityData.country}\r\n            description={props.cityData.description}\r\n        />\r\n        </>\r\n    )\r\n}\r\n\r\nexport const getStaticPaths = async() => {\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://artur:leeloo83@cluster0.mm3bc.mongodb.net/cities?retryWrites=true&w=majority');\r\n   const db = client.db();\r\n\r\n   const citiesCollection = db.collection('cities');\r\n\r\n   const cities = await citiesCollection.find({}, {_id: 1}).toArray();\r\n\r\n   client.close();\r\n\r\n    return {\r\n        fallback: false,\r\n        paths: cities.map(city => ({params: {cityId: city._id.toString()}})),\r\n    }\r\n}\r\n\r\nexport const getStaticProps = async(context) => {\r\n\r\n    const cityId = context.params.cityId;\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://artur:leeloo83@cluster0.mm3bc.mongodb.net/cities?retryWrites=true&w=majority');\r\n   const db = client.db();\r\n\r\n   const citiesCollection = db.collection('cities');\r\n\r\n   const selectedCity = await citiesCollection.findOne({_id: ObjectId(cityId)});\r\n\r\n   client.close();\r\n\r\n    return {\r\n        props: {\r\n            cityData: {\r\n                id: selectedCity._id.toString(),\r\n                title: selectedCity.title,\r\n                country: selectedCity.country,\r\n                image: selectedCity.image,\r\n                description: selectedCity.description\r\n            },\r\n        }\r\n    }\r\n}\r\n\r\nexport default CityDetails;"]},"metadata":{},"sourceType":"module"}